// implementation for corner_singularity.h

#include <cmath>
#include <utils/tiny_tools.h>

namespace MathTL
{
  CornerSingularityBiharmonic::CornerSingularityBiharmonic(const Point<2>& x,
				       const double w0,
				       const double w,
				       const double t0,
				       const double t1)
    : Function<2>(), x0(x), theta0(w0), omega(w*M_PI), r0(t0), r1(t1)
  {
  }
  
  double
  CornerSingularityBiharmonic::value(const Point<2>& p,
			   const unsigned int component) const
  {
    const Point<2> x(p-x0);
    const double r = hypot(x[0],x[1]);
    double rootz[2];
    rootz[0]=0.544483736782463929140876854601;
    rootz[1]=0.908529189846098818660368657869;
    if (r >= r1) return 0.0;

    double theta = atan2(x[1],x[0]);

    // shift theta to [0,2*pi]
    if (theta < 0) theta += 2.0 * M_PI;
    theta -= theta0 * M_PI;
    if (theta < 0) theta += 2.0 * M_PI;
    if (theta >= omega) return 0.0;
 
#if 0
   //seems to work
    double res=0.0;
    for(unsigned int m=0; m<2; m++)
      res+= zeta(r) * pow(r, 1.0+rootz[m]) * ( (1./(rootz[m]-1.)*sin((rootz[m]-1.)*omega)
					     - 1./(rootz[m]+1.)*sin((rootz[m]+1.)*omega))
					    *(cos((rootz[m]-1.)*theta)-cos((rootz[m]+1.)*theta))
						  - (1./(rootz[m]-1.)*sin((rootz[m]-1.)*theta)
					      - 1./(rootz[m]+1.)*sin((rootz[m]+1.)*theta))
					    *(cos((rootz[m]-1.)*omega)-cos((rootz[m]+1.)*omega)) );
    return res;
#else
    //Maple output
  double t56;
  double t58;
  double t21;
  double t32;
  double t61;
  double t62;
  double t35;
  double t36;
  double t16;
  double t24;
  double t25;
  double t26;
  double t42;
  double t27;
  double t43;
  double t44;
  double t17;
  double t1;
  double t46;
  double t3;
  double t47;
  double t5;
  double t18;
  double t6;
  double t7;
  double t50;
  double t51;
  double t9;
  double t52;
  double t11;
  double t53;
  double t12;
  double t15;
  double t20;
  double t30;
  t1 = 0.99e2 / 0.100e3 - r;
  t3 = t1 * t1;
  t5 = exp(-0.1e1 / t3);
  t6 = (0.0e0 < t1) ? t5 : 0;
  t7 = r - 0.1e1 / 0.100e3;
  t9 = t7 * t7;
  t11 = exp(-0.1e1 / t9);
  t12 = (0.0e0 < t7) ? t11 : 0;
  t15 = t6 / (t12 + t6);
  t16 = pow(r, 0.154448373678246e1);
  t17 = 0.683274394826304e0 * 0.3141592654e1;
  t18 = sin(t17);
  t20 = 0.231672560517369e1 * 0.3141592654e1;
  t21 = sin(t20);
  t24 = 0.455516263217536e0 * theta;
  t25 = cos(t24);
  t26 = 0.154448373678246e1 * theta;
  t27 = cos(t26);
  t30 = sin(t24);
  t32 = sin(t26);
  t35 = cos(t17);
  t36 = cos(t20);
  t42 = pow(r, 0.190852918984610e1);
  t43 = 0.137206215230852e0 * 0.3141592654e1;
  t44 = sin(t43);
  t46 = 0.286279378476915e1 * 0.3141592654e1;
  t47 = sin(t46);
  t50 = 0.91470810153901e-1 * theta;
  t51 = cos(t50);
  t52 = 0.190852918984610e1 * theta;
  t53 = cos(t52);
  t56 = sin(t50);
  t58 = sin(t52);
  t61 = cos(t43);
  t62 = cos(t46);
  return(t15 * t16 * ((0.219531130005438e1 * t18 - 0.6474655422e0 * t21) * (t25 - t27) - (0.219531130005438e1 * t30 - 0.6474655422e0 * t32) * (t35 - t36)) + t15 * t42 * ((0.109324493608123e2 * t44 - 0.5239636917e0 * t47) * (t51 - t53) - (0.109324493608123e2 * t56 - 0.5239636917e0 * t58) * (t61 - t62)));
#endif
  }

  inline
  void
  CornerSingularityBiharmonic::vector_value(const Point<2> &p,
				  Vector<double>& values) const
  {
    values[0] = value(p);
  }

  double
  CornerSingularityBiharmonic::zeta(const double r) const {
    if (r <= r0)
      return 1.0;
    else {
      if (r >= r1)
	return 0.0;
      else {
	const double help1(r1-r);
	const double help0(r-r0);
	return exp(-1.0/(help1*help1))/(exp(-1.0/(help0*help0))+exp(-1.0/(help1*help1)));
      }
    }
  }

  CornerSingularityBiharmonicRHS::CornerSingularityBiharmonicRHS(const Point<2>& x,
					     const double w0,
					     const double w,
					     const double t0,
					     const double t1)
    : Function<2>(), x0(x), theta0(w0), omega(w*M_PI), r0(t0), r1(t1)
  {
  }
  
  double
  CornerSingularityBiharmonicRHS::value(const Point<2>& p,
			      const unsigned int component) const
  {
    const Point<2> x(p-x0);
    const double r = hypot(x[0],x[1]);
    
    if (r <= r0 || r >= r1) return 0.0;

    double theta = atan2(x[1],x[0]);

    // shift theta to [0,2*pi]
    if (theta < 0) theta += 2.0 * M_PI;
    theta -= theta0 * M_PI;
    if (theta < 0) theta += 2.0 * M_PI;
    if (theta >= omega) return 0.0;

#if 0
    // Due to the representation of the Laplacian in polar coordinates,
    // we have to calculate
    //   -d^2/dr^2 s(r,phi) - 1/r * d/dr s(r,phi) - 1/r^2 * d^2/dphi^2 s(r,phi)
    // Since u(r,phi)=r^{1/omega}sin(phi/omega) is harmonic, this reduces to
    //   -zeta''(r)*u(r,phi)+2*zeta'(r)u_r(r,phi)+1/r*zeta'(r)u(r,phi)

    //error inside

    double res=0.0;

    const double zeta_r=zeta(r);
    const double zeta_prime_r = zeta_prime(r);
    const double zeta_primeprime_r = zeta_primeprime(r);
    const double zeta_third_der_r=zeta_third_der(r);
    const double zeta_fourth_der_r = zeta_fourth_der(r);
    double root_z[2];
    root_z[0] = 0.544483736782463929140876854601;
    root_z[1] = 0.908529189846098818660368657869;
    const double r2 = r*r;
    const double r3 = r2*r;
    const double r4 = r3*r;
    double sin_th[2];
    double sin_th1[2];
    double sin_om[2];
    double sin_om1[2];
    double cos_th[2];
    double cos_th1[2];
    double cos_om[2];
    double cos_om1[2];
    double rest[2];
    double rest2[2];
    double rest4[2];
    double r_z[2];
    double root_z2[2];
    double root_z21[2];
    double root_z3[2];
    double root_z31[2];
    double root_z4[2];
    double root_z41[2];

      for(int i=0;i<2;i++)
	{
	  r_z[i] = pow(r,1+root_z[i]);
	  root_z2[i]=(root_z[i]-1)*(root_z[i]-1);
	  root_z21[i]=(root_z[i]+1)*(root_z[i]+1);
	  root_z3[i]=root_z2[i]*(root_z[i]-1);
	  root_z31[i]=root_z21[i]*(root_z[i]+1);
	  root_z4[2]=root_z2[i]*root_z2[i];
	  root_z41[2]=root_z21[i]*root_z21[i];
	  sin_th[i] = sin((root_z[i]-1)*theta);
	  sin_th1[i] = sin((root_z[i]+1)*theta);
	  sin_om[i] = sin((root_z[i]-1)*omega);
	  sin_om1[i] = sin((root_z[i]+1)*omega);
	  cos_th[i] = cos((root_z[i]-1)*theta);
	  cos_th1[i] = cos((root_z[i]+1)*theta);
	  cos_om[i] = cos((root_z[i]-1)*omega);
	  cos_om1[i] = cos((root_z[i]+1)*omega);
	  rest[i] = (sin_om[i]/(root_z[i]-1)-sin_om1[i]/(root_z[i]+1))*(cos_th[i]-cos_th1[i])
	    -(sin_th[i]/(root_z[i]-1)-sin_th1[i]/(root_z[i]+1))*(cos_om[i]-cos_om1[i]);
	  rest2[i] = (sin_om[i]/(root_z[i]-1)-sin_om1[i]/(root_z[i]+1))
	    *(-cos_th[i]*root_z2[i]+cos_th1[i]*root_z21[i])
	    -(-sin_th[i]*(root_z[i]-1)+sin_th1[i]*(root_z[i]+1))*(cos_om[i]-cos_om1[i]);
	  rest4[i]=(sin_om[i]/(root_z[i]-1)-sin_om1[i]/(root_z[i]+1))
	    *(cos_th[i]*root_z4[i]-cos_th1[i]*root_z41[i])
	    -(sin_th[i]*root_z3[i]-sin_th1[i]*root_z31[i])*(cos_om[i]-cos_om1[i]);
	}

      for(int i=0;i<2;i++)
	res += rest[i]*r_z[i]*(zeta_fourth_der_r+4*zeta_third_der_r*(1+root_z[i])/r
			       +(6*zeta_primeprime_r*root_z21[i]-6*zeta_primeprime_r*(1+root_z[i]))/r2
			       +(4*zeta_prime_r*root_z31[i]-12*zeta_prime_r*root_z21[i]
				 +8*zeta_prime_r*(1+root_z[i]))/r3
			       +(zeta_r*root_z41[i]-6*zeta_r*root_z31[i]
				 +11*zeta_r*root_z21[i]-6*zeta_r*(1+root_z[i]))/r4)
	  +2/r*rest[i]*r_z[i]*(zeta_third_der_r+3*zeta_primeprime_r*(1+root_z[i])/r
			       +(3*zeta_prime_r*root_z21[i]-3*zeta_prime_r*(1+root_z[i]))/r2
			       +(zeta_r*root_z31[i]-3*zeta_r*root_z21[i]
				 +2*zeta_r*(1+root_z[i]))/r3)
	  +1/r2*rest[i]*r_z[i]*(zeta_primeprime_r+2*zeta_prime_r*(1+root_z[i])/r
				+(zeta_r*root_z21[i]-zeta_r*(1+root_z[i]))/r2)
	  +2/r2*rest2[i]*r_z[i]*(zeta_primeprime_r+2*zeta_prime_r*(1+root_z[i])/r
				+(zeta_r*root_z21[i]-zeta_r*(1+root_z[i]))/r2)
	  +2/r3*rest2[i]*r_z[i]*(zeta_prime_r+zeta_r*(1+root_z[i])/r)
	  +1/r4*rest4[i]*zeta_r*r_z[i];

     
      return res;

#endif


#if 0
    // code from Markus Juergens' diploma thesis
    const double t1 = 1/r;
    const double t2 = r-r1;
    const double t3 = t2*t2;
    const double t7 = exp(-1/t3);
    const double t8 = 1/t3/t2*t7;
    const double t9 = r0-r;
    const double t10 = t9*t9;
    const double t12 = exp(-1/t10);
    const double t13 = t7+t12;
    const double t14 = 1/t13;
    const double t15 = 1/omega;
    const double t16 = pow(r,t15);
    const double t19 = sin(theta*t15);
    const double t20 = t14*t16*t19;
    const double t23 = t13*t13;
    const double t24 = 1/t23;
    const double t25 = t7*t24;
    const double t26 = t16*t19;
    const double t30 = t8-1/t10/t9*t12;
    const double t31 = 2.0*t26*t30;
    const double t34 = t7*t14*t16;
    const double t35 = t15*t1;
    const double t38 = t3*t3;
    const double t40 = 1/t38*t7;
    const double t45 = 1/t38/t3*t7;
    const double t71 = t10*t10;
    const double t82 = omega*omega;
    const double t84 = r*r;
    const double t85 = 1/t84;
    const double t88 = t34/t82*t85*t19;
    return -t1*(2.0*t8*t20-t25*t31+t34*t35*t19+r*
		(-6.0*t40*t20+4.0*t45*t20-4.0*t8*t24*t31+4.0*t8*t14*t16*t15*t1*t19+8.0*t7/t23/t13*t26*t30*t30-4.0*t25*t16*
		 t35*t19*t30-t25*t26*(-6.0*t40+4.0*t45-6.0/t71*t12+4.0/t71/t10*t12)+t88-t34*t15*
		 t85*t19))+t88;
#else
    //don't try to understand, it's just a Maple output
    // from codegen package
  double t100;
  double t1002;
  double t1005;
  double t1014;
  double t1019;
  double t102;
  double t1022;
  double t1031;
  double t1038;
  double t104;
  double t1047;
  double t105;
  double t1050;
  double t1053;
  double t106;
  double t1062;
  double t1065;
  double t1068;
  double t1077;
  double t108;
  double t1086;
  double t109;
  double t1099;
  double t11;
  double t1107;
  double t111;
  double t1112;
  double t1117;
  double t1124;
  double t113;
  double t1135;
  double t1140;
  double t1147;
  double t116;
  double t117;
  double t1170;
  double t1177;
  double t119;
  double t1198;
  double t1205;
  double t1206;
  double t121;
  double t123;
  double t1239;
  double t124;
  double t1241;
  double t126;
  double t1260;
  double t1263;
  double t1268;
  double t1275;
  double t1278;
  double t128;
  double t13;
  double t130;
  double t1301;
  double t1308;
  double t1311;
  double t1314;
  double t132;
  double t1330;
  double t134;
  double t1345;
  double t135;
  double t1350;
  double t1359;
  double t138;
  double t1384;
  double t1390;
  double t1395;
  double t140;
  double t141;
  double t1418;
  double t142;
  double t144;
  double t1445;
  double t145;
  double t1452;
  double t1457;
  double t147;
  double t148;
  double t1486;
  double t149;
  double t15;
  double t151;
  double t1519;
  double t1529;
  double t153;
  double t155;
  double t1554;
  double t1569;
  double t157;
  double t1588;
  double t159;
  double t161;
  double t1624;
  double t163;
  double t165;
  double t1656;
  double t167;
  double t1688;
  double t169;
  double t17;
  double t171;
  double t1721;
  double t173;
  double t1740;
  double t175;
  double t1755;
  double t177;
  double t1788;
  double t179;
  double t18;
  double t181;
  double t1822;
  double t183;
  double t185;
  double t1855;
  double t187;
  double t1889;
  double t189;
  double t191;
  double t1921;
  double t193;
  double t195;
  double t1953;
  double t1964;
  double t197;
  double t1987;
  double t199;
  double t2;
  double t20;
  double t201;
  double t2018;
  double t203;
  double t2032;
  double t205;
  double t2051;
  double t207;
  double t2085;
  double t209;
  double t211;
  double t2118;
  double t213;
  double t215;
  double t2152;
  double t217;
  double t2183;
  double t219;
  double t22;
  double t221;
  double t2215;
  double t222;
  double t224;
  double t2248;
  double t226;
  double t228;
  double t2281;
  double t230;
  double t2314;
  double t232;
  double t234;
  double t2347;
  double t236;
  double t2377;
  double t238;
  double t24;
  double t240;
  double t2410;
  double t242;
  double t244;
  double t2442;
  double t246;
  double t2474;
  double t248;
  double t250;
  double t2507;
  double t252;
  double t2539;
  double t254;
  double t256;
  double t2571;
  double t258;
  double t26;
  double t260;
  double t2605;
  double t262;
  double t2637;
  double t2648;
  double t2649;
  double t265;
  double t2654;
  double t2655;
  double t2656;
  double t2657;
  double t266;
  double t267;
  double t268;
  double t269;
  double t273;
  double t274;
  double t275;
  double t277;
  double t279;
  double t28;
  double t280;
  double t282;
  double t283;
  double t285;
  double t287;
  double t289;
  double t29;
  double t291;
  double t293;
  double t295;
  double t297;
  double t298;
  double t3;
  double t300;
  double t301;
  double t302;
  double t303;
  double t304;
  double t305;
  double t306;
  double t308;
  double t309;
  double t31;
  double t310;
  double t311;
  double t312;
  double t314;
  double t315;
  double t317;
  double t319;
  double t321;
  double t322;
  double t324;
  double t326;
  double t327;
  double t329;
  double t33;
  double t331;
  double t332;
  double t334;
  double t335;
  double t336;
  double t338;
  double t339;
  double t34;
  double t342;
  double t346;
  double t348;
  double t349;
  double t354;
  double t355;
  double t358;
  double t359;
  double t36;
  double t360;
  double t361;
  double t364;
  double t366;
  double t370;
  double t375;
  double t376;
  double t377;
  double t38;
  double t382;
  double t383;
  double t384;
  double t387;
  double t388;
  double t391;
  double t392;
  double t4;
  double t40;
  double t400;
  double t405;
  double t406;
  double t409;
  double t410;
  double t416;
  double t419;
  double t42;
  double t420;
  double t423;
  double t426;
  double t427;
  double t428;
  double t433;
  double t434;
  double t437;
  double t438;
  double t439;
  double t44;
  double t442;
  double t443;
  double t444;
  double t447;
  double t448;
  double t453;
  double t458;
  double t46;
  double t467;
  double t472;
  double t474;
  double t48;
  double t480;
  double t483;
  double t484;
  double t487;
  double t488;
  double t489;
  double t492;
  double t5;
  double t50;
  double t501;
  double t514;
  double t515;
  double t516;
  double t517;
  double t52;
  double t520;
  double t525;
  double t528;
  double t53;
  double t533;
  double t534;
  double t537;
  double t538;
  double t55;
  double t553;
  double t558;
  double t56;
  double t561;
  double t568;
  double t57;
  double t577;
  double t58;
  double t580;
  double t581;
  double t584;
  double t589;
  double t59;
  double t594;
  double t599;
  double t6;
  double t60;
  double t602;
  double t607;
  double t608;
  double t611;
  double t616;
  double t617;
  double t62;
  double t620;
  double t631;
  double t634;
  double t635;
  double t638;
  double t639;
  double t64;
  double t642;
  double t645;
  double t649;
  double t652;
  double t659;
  double t66;
  double t661;
  double t663;
  double t666;
  double t67;
  double t671;
  double t674;
  double t68;
  double t683;
  double t686;
  double t69;
  double t693;
  double t696;
  double t7;
  double t703;
  double t706;
  double t709;
  double t71;
  double t716;
  double t72;
  double t725;
  double t73;
  double t733;
  double t738;
  double t74;
  double t743;
  double t748;
  double t75;
  double t751;
  double t76;
  double t764;
  double t77;
  double t78;
  double t787;
  double t79;
  double t792;
  double t799;
  double t80;
  double t801;
  double t82;
  double t820;
  double t827;
  double t83;
  double t830;
  double t835;
  double t836;
  double t84;
  double t845;
  double t848;
  double t85;
  double t853;
  double t866;
  double t87;
  double t873;
  double t878;
  double t88;
  double t887;
  double t89;
  double t9;
  double t90;
  double t900;
  double t909;
  double t910;
  double t92;
  double t923;
  double t926;
  double t93;
  double t94;
  double t945;
  double t95;
  double t951;
  double t956;
  double t961;
  double t968;
  double t97;
  double t981;
  double t984;
  double t989;
  double t99;
  {
    t2 = r*r;
    t3 = r*t2;
    t4 = t2*t2;
    t5 = t3*t4;
    t6 = pow(r,0.4E-13);
    t7 = t6*t6;
    t9 = t7*t7;
    t11 = t9*t9;
    t13 = t11*t11;
    t15 = t13*t13;
    t17 = t15*t15;
    t18 = t17*t17;
    t20 = t18*t18;
    t22 = t20*t20;
    t24 = t22*t22;
    t26 = t24*t24;
    t28 = t26*t26;
    t29 = t28*t28;
    t31 = t29*t29;
    t33 = t31*t31;
    t34 = t33*t33;
    t36 = t34*t34;
    t38 = t36*t36;
    t40 = t38*t38;
    t42 = t40*t40;
    t44 = t42*t42;
    t46 = t44*t44;
    t48 = t46*t46;
    t50 = t48*t48;
    t52 = t50*t50;
    t53 = t52*t52;
    t55 = t53*t53;
    t56 = t55*t55;
    t57 = t56*t56;
    t58 = t57*t57;
    t59 = t58*t58;
    t60 = t59*t59;
    t62 = t60*t60;
    t64 = t62*t62;
    t66 = t64*t64;
    t67 = t66*t66;
    t68 = t67*t67;
    t69 = t68*t68;
    t71 = t69*t69;
    t72 = t71*t71;
    t73 = t72*t72;
    t74 = t73*t73;
    t75 = t74*t74;
    t76 = t6*t7*t9*t11*t13*t15*t18*t20*t22*t24*t26*t29*t31*t34*t36*t38*t40*t42*
t44*t46*t48*t50*t53*t60*t62*t64*t69*t75;
    t77 = t76*t5;
    t78 = 0.19085291898461E1*theta;
    t79 = cos(t78);
    t80 = t77*t79;
    t82 = t4*t4;
    t83 = r*t82;
    t84 = t76*t83;
    t85 = t84*t79;
    t87 = t76*t4;
    t88 = 0.91470810153901E-1*theta;
    t89 = sin(t88);
    t90 = t87*t89;
    t92 = t2*t4;
    t93 = t76*t92;
    t94 = cos(t88);
    t95 = t93*t94;
    t97 = t77*t94;
    t99 = t76*t82;
    t100 = t99*t94;
    t102 = t84*t94;
    t104 = 0.154448373678246E1*theta;
    t105 = sin(t104);
    t106 = t105*t83;
    t108 = 0.455516263217536*theta;
    t109 = sin(t108);
    t111 = cos(t104);
    t113 = t93*t79;
    t116 = cos(t108);
    t117 = t4*t116;
    t119 = t99*t79;
    t121 = t3*t111;
    t123 = t76*r;
    t124 = t123*t79;
    t126 = t84*t89;
    t128 = t3*t109;
    t130 = t123*t89;
    t132 = t3*t105;
    t134 = 0.803860510426571E18*t80+0.227828370808696E17*t85
-0.252437285919965E19*t90+0.238155930690984E17*t95-0.103097805493932E17*t97+
0.260347993671546E16*t100-292197523761556.0*t102-139926030494797.0*t106+
0.173257231983782E16*t109-552698608019387.0*t111-0.185691777908538E19*t113+
127824842228919.0*t105-0.662217929396602E17*t117-0.202995078390548E18*t119+
0.478478109053275E17*t121+0.189204678363493E18*t124+0.137219477749843E16*t126
-0.149990956258202E18*t128+0.113956690559254E17*t130-0.110659567280077E17*t132;
    t135 = t2*t111;
    t138 = t105*t92;
    t140 = r*t4;
    t141 = t76*t140;
    t142 = t141*t89;
    t144 = t76*t3;
    t145 = t144*t89;
    t147 = t76*t2;
    t148 = sin(t78);
    t149 = t147*t148;
    t151 = t76*t148;
    t153 = t2*t116;
    t155 = t76*t79;
    t157 = t147*t89;
    t159 = t116*t92;
    t161 = t116*t5;
    t163 = t116*t82;
    t165 = t116*t83;
    t167 = t111*r;
    t169 = t111*t92;
    t171 = t111*t5;
    t173 = t111*t82;
    t175 = t111*t83;
    t177 = t76*t94;
    t179 = -0.706902737510219E17*t135+671006128342478.0*t116+
0.11404687346898E17*t138+0.960679677219171E18*t142+0.244486957655434E19*t145+
0.60948678587309E17*t149+653314902097566.0*t151+0.750358208703274E17*t153
-0.208125146199842E17*t155-0.817038761884413E18*t157+0.598679800276502E17*t159
-0.259168744708442E17*t161+0.654466527041521E16*t163-734530333379934.0*t165+
0.502453280017625E16*t167-0.49312439676149E17*t169+0.213473764831814E17*t171
-0.539075163716701E16*t173+605022630434008.0*t175+266927477628192.0*t177;
    t181 = t4*t109;
    t183 = t140*t109;
    t185 = t4*t105;
    t187 = t140*t105;
    t189 = t109*t92;
    t191 = t109*t5;
    t193 = t93*t89;
    t195 = t77*t89;
    t197 = t109*t82;
    t199 = t76*t89;
    t201 = t109*r;
    t203 = t147*t79;
    t205 = t123*t94;
    t207 = t105*r;
    t209 = t109*t83;
    t211 = t116*r;
    t213 = t144*t94;
    t215 = t87*t94;
    t217 = t87*t148;
    t219 = t141*t148;
    t221 = -0.567469402592884E17*t181-0.383047623283039E17*t183+
0.100528788284776E18*t185-0.733414739638367E17*t187+0.154582202247144E18*t189
-0.669187022714911E17*t191-0.111840894514604E18*t193+0.484159716513436E17*t195+
0.168986621897705E17*t197-0.125352359615179E16*t199-0.157506574530711E17*t201
-0.9332522107593E18*t203-0.242661343298357E16*t205-0.11620440202629E16*t207
-0.189659508302699E16*t209-0.610005571220435E16*t211-0.534589651703281E18*t213+
0.551660378558543E18*t215+0.19880060493695E18*t217-0.124642882525077E18*t219;
    t222 = t144*t148;
    t224 = t87*t79;
    t226 = t141*t79;
    t228 = t144*t79;
    t230 = t93*t148;
    t232 = t77*t148;
    t234 = t99*t148;
    t236 = t84*t148;
    t238 = t123*t148;
    t240 = t140*t111;
    t242 = t141*t94;
    t244 = t147*t94;
    t246 = t2*t109;
    t248 = t2*t105;
    t250 = t99*t89;
    t252 = t4*t111;
    t254 = t105*t5;
    t256 = t105*t82;
    t258 = t140*t116;
    t260 = t3*t116;
    t262 = -0.168533454120764E18*t222-0.324659555733038E19*t224+
0.293147841857748E19*t226+0.231324686969269E19*t228+0.582895473803786E17*t230
-0.252335702945362E17*t232+0.637211371074147E16*t234-715164277299828.0*t236
-0.593922638270515E16*t238-0.306341272676596E17*t240-0.209321672343304E18*t242+
0.178593362555222E18*t244+0.156423768742928E18*t246-0.226699791976751E17*t248
-0.12226255467511E17*t250+0.817400205874197E17*t252-0.493709408956622E16*t254+
0.124674093170864E16*t256+0.149591498456803E17*t258-0.580898411528488E17*t260;
    t265 = 100.0*r;
    t266 = -99.0+t265;
    t267 = t266*t266;
    t268 = t267*t267;
    t269 = t268*t268;
    t273 = pow(r,0.2E-13);
    t274 = t273*t273;
    t275 = t274*t274;
    t277 = t275*t275;
    t279 = t277*t277;
    t280 = t279*t279;
    t282 = t280*t280;
    t283 = t282*t282;
    t285 = t283*t283;
    t287 = t285*t285;
    t289 = t287*t287;
    t291 = t289*t289;
    t293 = t291*t291;
    t295 = t293*t293;
    t297 = t295*t295;
    t298 = t297*t297;
    t300 = t298*t298;
    t301 = t300*t300;
    t302 = t301*t301;
    t303 = t302*t302;
    t304 = t303*t303;
    t305 = t304*t304;
    t306 = t305*t305;
    t308 = t306*t306;
    t309 = t308*t308;
    t310 = t309*t309;
    t311 = t310*t310;
    t312 = t311*t311;
    t314 = t312*t312;
    t315 = t314*t314;
    t317 = t315*t315;
    t319 = t317*t317;
    t321 = t319*t319;
    t322 = t321*t321;
    t324 = t322*t322;
    t326 = t324*t324;
    t327 = t326*t326;
    t329 = t327*t327;
    t331 = t329*t329;
    t332 = t331*t331;
    t334 = t332*t332;
    t335 = t334*t334;
    t336 = t335*t335;
    t338 = t336*t336;
    t339 = t338*t338;
    t342 = 1/t273/t275/t277/t280/t283/t285/t287/t289/t291/t293/t295/t298/t306/
t312/t315/t317/t319/t322/t324/t327/t329/t332/t336/t339/t2;
    t346 = 1/t267;
    t348 = exp(-10000.0*t346);
    t349 = 10000.0*t2;
    t354 = pow(t265-1.0,2.0);
    t355 = 1/t354;
    t358 = exp(-40000.0*(t349-10000.0*r+4901.0)*t346*t355);
    t359 = t105*t358;
    t360 = t82*t82;
    t361 = t82*t360;
    t364 = t360*t116;
    t366 = exp(-40000.0*t355);
    t370 = exp(-40000.0*t346);
    t375 = t2*t82;
    t376 = t76*t375;
    t377 = t376*t148;
    t382 = t5*t360;
    t383 = t76*t382;
    t384 = t383*t79;
    t387 = t140*t82;
    t388 = t387*t105;
    t391 = t140*t360;
    t392 = t391*t111;
    t400 = exp(-40000.0*(t349-5100.0*r+2451.0)*t346*t355);
    t405 = t5*t82;
    t406 = t405*t111;
    t409 = r*t360;
    t410 = t409*t109;
    t416 = exp(-40000.0*(t349-14900.0*r+7351.0)*t346*t355);
    t419 = t2*t360;
    t420 = t419*t109;
    t423 = t409*t105;
    t426 = -0.839556182968782E39*t359*t361-0.315424291685962E58*t364*t366+
0.105448487508714E28*t224*t370-0.138628149806536E50*t128*t366
-0.629243479965558E37*t377*t370+0.297104499522427E50*t228*t366
-0.273394044970435E42*t384*t370-0.484666732243604E58*t388*t366+
0.194688014779607E55*t392*t358-0.28189596287274E56*t90*t400
-0.284643451146915E57*t254*t366-0.389393910170803E58*t406*t366+
0.146346077576629E58*t410*t416-0.161346668370096E57*t420*t416+
0.225505081371015E58*t423*t358;
    t427 = t92*t82;
    t428 = t427*t109;
    t433 = t76*t409;
    t434 = t433*t148;
    t437 = t4*t360;
    t438 = t76*t437;
    t439 = t438*t148;
    t442 = t3*t82;
    t443 = t76*t442;
    t444 = t443*t148;
    t447 = t3*t360;
    t448 = t447*t109;
    t453 = t419*t116;
    t458 = t360*t109;
    t467 = t442*t105;
    t472 = t111*t400;
    t474 = 0.828493764618892E58*t428*t400+0.208914308363746E57*t189*t400+
0.141394140605487E43*t434*t370+0.351477424533487E56*t439*t366+
0.494791757289846E58*t444*t366+0.155425954797972E57*t448*t358
-0.184055280131002E55*t117*t366-0.157174361503155E57*t453*t366
-0.244960659639051E58*t189*t358-0.522960150527705E58*t458*t416+
0.121166172739537E18*t155*t358+0.518086515993443E56*t448*t400
-0.821740505229881E57*t226*t358-0.292951209135495E58*t467*t400
-0.410838690213511E36*t126*t370+0.214513162665044E16*t472;
    t480 = t427*t116;
    t483 = t76*t391;
    t484 = t483*t148;
    t487 = t4*t82;
    t488 = t76*t487;
    t489 = t488*t79;
    t492 = t437*t111;
    t501 = t387*t109;
    t514 = -0.471492366139179E58*t100*t366-0.284006886456336E58*t364*t416+
0.116513927160391E57*t480*t416-0.270541444950845E55*t484*t400
-0.604675251254038E59*t489*t358-0.962465387584566E56*t492*t416+
0.417483857722855E57*t420*t400-0.467194053010555E59*t126*t366
-0.133152091593212E57*t187*t358-0.185915118950513E59*t501*t416
-0.772938249814366E58*t195*t366+0.22586163795486E50*t260*t358
-0.83738726604197E58*t444*t358+0.474472581429656E58*t195*t400
-0.245181512080547E57*t240*t358;
    t515 = t92*t360;
    t516 = t76*t515;
    t517 = t516*t148;
    t520 = t442*t109;
    t525 = t391*t116;
    t528 = t438*t79;
    t533 = t76*t361;
    t534 = t533*t148;
    t537 = t76*t387;
    t538 = t537*t79;
    t553 = t437*t109;
    t558 = -0.283714822907591E42*t517*t358-0.291021275787978E59*t520*t358+
0.134012559264797E57*t169*t366+0.570568941509337E55*t525*t400
-0.160548249950994E57*t528*t366-0.297161910976403E50*t213*t400
-0.715164277299828E39*t534*t366-0.179833547188035E59*t538*t366+
0.116004703035795E44*t528*t370-0.364144668788061E59*t209*t416
-0.320821795861496E56*t492*t366-0.481644749852955E57*t528*t358
-0.169125029084278E58*t80*t366+0.469439960691587E58*t119*t366
-0.13707388806286E57*t553*t416+0.34062131931852E58*t165*t366;
    t561 = t105*t370;
    t568 = t375*t116;
    t577 = t438*t94;
    t580 = t76*t360;
    t581 = t580*t94;
    t584 = t447*t111;
    t589 = t533*t79;
    t594 = t433*t94;
    t599 = -0.17314330673835E39*t561*t487-0.81162433485252E55*t484*t416+
0.592703892847091E23*t213*t370+0.258788926384587E59*t568*t416
-0.136320059687462E26*t215*t370+0.878647050730644E35*t102*t370
-0.579967563494853E42*t561*t419-0.221406402623176E56*t577*t366
-0.737749361851325E58*t581*t366+0.202629628881022E57*t584*t366
-0.139926030494797E39*t561*t361+0.136697022485218E42*t589*t358+
0.297093265847819E50*t228*t400-0.349089323434265E58*t594*t400+
0.76837672265499E18*t238*t370;
    t602 = t515*t116;
    t607 = t76*t405;
    t608 = t607*t89;
    t611 = t360*t105;
    t616 = t76*t447;
    t617 = t616*t89;
    t620 = t516*t89;
    t631 = t111*t358;
    t634 = t76*t427;
    t635 = t634*t94;
    t638 = t76*t419;
    t639 = t638*t148;
    t642 = t537*t89;
    t645 = 0.696512818630811E58*t458*t358-0.194265056826725E42*t602*t416
-0.409114831334879E56*t183*t400+0.792209943441141E59*t608*t358+
0.837142860344179E57*t611*t366+0.101671722028542E58*t230*t416+
0.911226288656457E57*t617*t358+0.907278720544632E41*t620*t370
-0.138637214606924E50*t128*t400-0.116767218929888E33*t195*t370
-0.14676712590601E45*t157*t358-0.113452744140412E57*t169*t400
-0.589779626774411E37*t631*r-0.208929617894522E59*t635*t366
-0.127633008672214E43*t639*t370-0.124122693242902E60*t642*t366;
    t649 = t634*t148;
    t652 = t376*t79;
    t659 = t109*t400;
    t661 = t109*t370;
    t663 = t487*t109;
    t666 = t487*t111;
    t671 = t376*t89;
    t674 = t483*t89;
    t683 = t383*t148;
    t686 = -0.642194518291206E58*t581*t416+0.591004566034931E58*t649*t358+
0.937143666293501E58*t652*t400+0.303742096218431E57*t617*t366
-0.969126692556203E56*t230*t366-0.67244527574653E16*t659-0.168111318936632E16*
t661-0.202640251833906E59*t663*t366-0.231714167876961E59*t666*t358+
0.486517076728997E16*t199*t416+0.650621199399001E58*t671*t358
-0.439800447135287E56*t674*t400+0.678328312704987E56*t215*t416
-0.278315545281073E24*t145*t370-0.278094844099418E58*t197*t366+
0.858197132759794E40*t683*t370;
    t693 = t116*t366;
    t696 = t638*t79;
    t703 = t515*t111;
    t706 = t638*t94;
    t709 = t442*t116;
    t716 = t607*t94;
    t725 = -0.331212849606813E26*t217*t370+0.392607456651034E58*t444*t400+
0.206749050415353E32*t113*t370-0.734530333379934E39*t693*t361
-0.218172788199872E58*t696*t400-0.485662642066812E41*t602*t366+
0.687101614712855E37*t238*t416+0.160013481188562E42*t703*t400+
0.487352142989969E57*t706*t416+0.489803021750394E58*t709*t400
-0.290410862608327E41*t472*t382+0.593460081092039E43*t153*t358+
0.138356889265874E59*t716*t366-0.701155595328745E58*t663*t400
-0.202557850248254E56*t117*t358-0.224135127836936E56*t240*t366;
    t733 = t580*t89;
    t738 = t515*t109;
    t743 = t427*t105;
    t748 = t375*t109;
    t751 = t376*t94;
    t764 = 0.224724014619907E28*t242*t370-0.631587900916018E59*t102*t416
-0.424285272265945E59*t733*t358+0.417304581308131E58*t256*t358
-0.125400590975645E42*t738*t366-0.104618347277984E38*t124*t400+
0.355854575492674E58*t743*t366-0.392026844259748E59*t501*t358
-0.166369294033838E38*t748*t370-0.142436098544504E58*t751*t358+
0.224135566009879E56*t258*t366+0.442531605382565E59*t663*t358
-0.925174122507938E40*t561*t515-0.103599785846063E16*t177*t416+
0.27567814706768E59*t102*t358;
    t787 = t427*t111;
    t792 = t447*t116;
    t799 = 0.128276974432366E31*t193*t370+0.109107210713249E58*t639*t416+
0.144626272832835E24*t222*t370+0.239736463148363E41*t561*t427+
0.449934730783025E58*t480*t400+0.340645888536812E57*t142*t400
-0.556560621821184E58*t748*t400+0.240020221782841E42*t703*t358+
0.179898090761632E57*t219*t358-0.289415263046547E57*t420*t366
-0.241242774736183E58*t410*t400-0.133226459063894E59*t787*t358
-0.437202150408296E57*t106*t400+0.844080403681181E56*t792*t416+
0.193794426156419E58*t410*t366+0.678551661000045E56*t224*t358;
    t801 = t111*t416;
    t820 = t616*t148;
    t827 = t360*t111;
    t830 = t438*t89;
    t835 = 0.242009052173606E40*t801*t361+0.135105320206887E55*t217*t400
-0.752403545853867E42*t738*t358-0.15804654780236E59*t709*t358+
0.761463907470394E58*t191*t358-0.394981151782001E58*t106*t358+
0.214544589557382E57*t428*t416+0.164033323902681E56*t219*t366+
0.83296797859022E58*t467*t358+0.811257421601834E42*t820*t370+
0.727789481941312E56*t138*t366-0.213141485141087E43*t248*t358
-0.637472276607542E58*t827*t358+0.101134263505769E57*t830*t400+
0.386332457902094E59*t671*t400;
    t836 = t616*t94;
    t845 = t634*t89;
    t848 = t409*t111;
    t853 = t488*t89;
    t866 = t437*t116;
    t873 = 0.129133742675657E43*t836*t370-0.32130589755247E44*t244*t366
-0.427680188051979E21*t149*t370-0.617135588354615E55*t224*t400
-0.252448075863004E59*t845*t416+0.210262829304582E58*t848*t416+
0.54436723232678E42*t620*t358+0.133805459336748E60*t853*t366
-0.805048445273071E57*t175*t400+0.881436400055921E40*t693*t382
-0.182777633691709E59*t444*t416+0.648960049264718E54*t392*t400
-0.320294912196635E37*t207*t358-0.248138270343823E56*t866*t400+
0.309949576375104E57*t90*t358+0.378592295871523E59*t663*t416;
    t878 = t443*t89;
    t887 = t616*t79;
    t900 = t105*t366;
    t909 = 0.483493611987278E58*t171*t416-0.116308815617617E60*t878*t366
-0.650556841343834E30*t230*t370+0.332386306847187E35*t561*t83
-0.104618347277984E38*t124*t366+0.222510552888524E58*t887*t416
-0.101283908103928E35*t197*t370+0.245768099544641E57*t240*t416+
0.110004223486366E56*t185*t358-0.189143215271727E42*t517*t416+
0.367436986410578E58*t649*t416-0.139926030494797E39*t900*t361
-0.758638033210798E40*t659*t361-0.122666613827378E50*t132*t358+
0.107578297457599E59*t106*t416;
    t910 = t109*t366;
    t923 = t419*t111;
    t926 = t387*t116;
    t945 = 0.227591409963239E41*t910*t382+0.205479366908798E38*t561*t442+
0.958267804273222E40*t853*t370+0.303402790517087E57*t830*t416+
0.243169123207868E38*t130*t366-0.395810388460389E58*t827*t400
-0.161583356516153E58*t923*t416+0.210463069849475E41*t926*t370
-0.501602363902581E42*t738*t400-0.58577367811985E58*t234*t358
-0.182043940348002E58*t85*t400-0.176435841379338E58*t193*t400+
0.121629269182249E16*t199*t366+0.383538343425572E24*t128*t370
-0.109981649978393E56*t185*t416+0.101134263505782E57*t830*t366;
    t951 = t409*t116;
    t956 = t516*t79;
    t961 = t607*t79;
    t968 = t405*t105;
    t981 = t483*t79;
    t984 = 0.869092830449434E58*t406*t358-0.651608923338103E37*t568*t370+
0.240500946138123E41*t951*t370-0.134016072755461E57*t159*t366+
0.15063738483826E43*t956*t370-0.346195625611022E58*t611*t358+
0.242953224286852E58*t961*t416-0.38497153885477E36*t211*t358
-0.13101305953003E58*t951*t400+0.273689267122738E58*t968*t400+
0.640035201494582E26*t90*t370-0.202516287353545E56*t252*t416
-0.117791622536915E59*t716*t400-0.407156336764161E51*t145*t416+
0.957378031281498E55*t423*t366+0.12357822293628E56*t981*t366;
    t989 = t383*t94;
    t1002 = t405*t109;
    t1005 = t391*t109;
    t1014 = t537*t148;
    t1019 = t487*t116;
    t1022 = -0.109357617988174E43*t384*t416+0.833304205411457E58*t581*t400+
0.350637028513867E40*t989*t370-0.225873927327254E50*t121*t358+
0.374471026583603E59*t100*t416-0.40709879752386E51*t145*t358
-0.156781098899843E58*t951*t358-0.337306128961239E58*t175*t366+
0.109860368882094E59*t1002*t366+0.105062529736923E56*t1005*t366+
0.222510552888517E58*t887*t358-0.100965960838548E59*t926*t416
-0.727304204376191E58*t175*t358-0.108919477355032E59*t1014*t358+
0.123578222936128E56*t981*t400-0.227689044508234E40*t1019*t370;
    t1031 = t375*t105;
    t1038 = t111*t370;
    t1047 = t447*t105;
    t1050 = t437*t105;
    t1053 = t488*t94;
    t1062 = 0.178745362157237E58*t568*t358+0.146581149075637E59*t467*t416
-0.884616696744292E57*t1031*t358+0.372906262210355E56*t181*t416
-0.141424611841618E59*t197*t358+0.361832202890272E21*t1038*t2+
0.741701842961729E57*t887*t366-0.532353714084451E37*t205*t366-633910796190366.0
*t151*t370+0.330129608982111E57*t1047*t416-0.522691447472815E56*t1050*t416+
0.663773275351323E59*t1053*t358+0.105443227360033E57*t439*t416
-0.216653493534073E58*t434*t358+0.240328107746683E59*t1019*t358;
    t1065 = t634*t79;
    t1068 = t607*t148;
    t1077 = t105*t400;
    t1086 = t483*t94;
    t1099 = -0.160548249950962E57*t528*t400+0.228200451692653E43*t1065*t370
-0.531881061179615E57*t1068*t416-0.650039886863762E18*t1038*r+
0.443686930413738E42*t561*t409-0.822797066781517E57*t242*t416+
0.671644946375026E40*t1077*t382-0.22218027383788E56*t258*t400
-0.148550725588114E56*t217*t358-0.752855626992498E49*t260*t366+
0.646652989515939E41*t1086*t370+0.140254811405546E41*t989*t416
-0.174230482490932E56*t1050*t400-0.309847563158691E57*t90*t416+
0.154148500313224E58*t827*t366+0.149054594496842E43*t845*t370;
    t1107 = t488*t148;
    t1112 = t405*t116;
    t1117 = t443*t79;
    t1124 = t109*t358;
    t1135 = 0.954351038631229E59*t845*t366+0.194688014779634E55*t392*t416+
0.120801315548411E36*t119*t370-0.507589702298482E58*t1107*t366+
0.132377462884079E59*t1107*t358+0.407273981431028E58*t1112*t416+
0.891359829036082E50*t213*t416-0.2260115306936E59*t1117*t366+
0.265218454166089E60*t642*t358+0.481750020676261E58*t666*t400
-0.113795704981619E41*t1124*t361-0.133895622268933E42*t1038*t391
-0.151026518430795E58*t163*t366-0.768474374797442E57*t923*t400+
0.281360134560648E56*t792*t400;
    t1140 = t533*t89;
    t1147 = t515*t105;
    t1170 = 0.110802300050343E59*t388*t358+0.127451756855827E58*t1068*t366+
0.137219477749843E40*t1140*t370-0.593769478354827E43*t153*t366+
0.303742096218553E57*t617*t400-0.925174122507938E40*t1147*t366+
0.891233862269111E50*t213*t358-0.38623940262619E57*t113*t400-258999464615157.0*
t177*t370+0.41353245231276E58*t161*t358-0.131764983250514E57*t968*t416
-0.128323846284923E36*t211*t400-0.593924176986214E43*t153*t416
-0.196593208924805E37*t167*t366+0.146766466208888E45*t157*t366+
0.84556779989721E56*t230*t400;
    t1177 = t391*t105;
    t1198 = t433*t79;
    t1205 = -0.487127303378521E57*t820*t358+0.233935951689432E58*t652*t358+
0.105730306319067E55*t1177*t358-0.664962026891508E56*t836*t366
-0.578034687729035E37*t85*t370-0.559704121979188E39*t1077*t361
-0.522691447472822E56*t1050*t358+0.225866560826584E50*t260*t416
-0.156918261056378E57*t649*t400+0.145918976018122E39*t444*t370+
0.741701842961696E57*t887*t400+0.20251628420173E56*t117*t416+
0.576174892750705E58*t1198*t416-0.72352036372495E58*t743*t358+
0.745750552481828E56*t226*t400;
    t1206 = t533*t94;
    t1239 = -0.292197523761556E39*t1206*t370-0.267364513835535E59*t100*t358+
0.442678771409669E57*t113*t366+0.439838256155525E59*t538*t416
-0.439273480510182E21*t153*t370-0.126138072166255E58*t434*t416+
0.171170682452773E56*t525*t416-0.504199676928859E43*t981*t370
-0.157013022682054E60*t845*t358-0.2421777021488E57*t173*t400
-0.194265056826725E42*t602*t400-0.452548531596958E57*t183*t416+
0.570568941509289E55*t525*t366+0.393697421365039E58*t1014*t366
-0.39676673147106E42*t439*t370+0.794769807903874E57*t951*t416;
    t1241 = t109*t416;
    t1260 = t387*t111;
    t1263 = t580*t148;
    t1268 = t580*t79;
    t1275 = t116*t400;
    t1278 = 0.910365639852958E41*t1241*t382+0.209363289032423E44*t203*t366+
0.393720939411709E43*t594*t370+0.205604230223549E59*t1019*t416
-0.53609700699651E57*t191*t400+0.538049887052914E59*t608*t400
-0.535412254994095E58*t1112*t400+0.290981654571772E57*t171*t400
-0.423679595181998E57*t923*t366-0.940741888819747E57*t1260*t400+
0.585231776302394E57*t1263*t416+0.103783860998256E58*t80*t400
-0.71799459131836E58*t1268*t400-0.30367603518489E42*t674*t370+
0.229033871570951E37*t238*t400+0.352574560022369E41*t1275*t382;
    t1301 = t375*t111;
    t1308 = t116*t370;
    t1311 = t111*t366;
    t1314 = 0.169757190372256E59*t652*t366+0.486517076728997E16*t199*t400+
0.110043202994035E57*t1047*t400+0.176288175824696E56*t848*t366+
0.548877910999374E40*t1140*t400-0.339917732102003E58*t787*t416+
0.198090839746522E59*t175*t416+0.772020934541252E57*t165*t400+
0.724013892587108E58*t165*t358-0.469226149583779E58*t467*t366
-0.106764970732211E37*t900*r-0.260470633639946E59*t1301*t416+
0.280325194720641E26*t252*t370+0.189922097603273E36*t165*t370+
0.162556557583246E42*t1308*t391+0.605022630434008E39*t1311*t361;
    t1330 = t516*t94;
    t1345 = t537*t94;
    t1350 = -0.464417225739364E58*t113*t416-0.424913522219787E57*t926*t400
-0.377828085376019E59*t608*t416-0.875813989410341E58*t480*t366
-0.199488608067453E57*t836*t416-0.308978935778809E43*t581*t370
-0.193197496340856E41*t1330*t370+0.121629269182249E16*t199*t370+
0.20673706578807E58*t848*t400+0.327554729621952E58*t1031*t366
-0.189143215271727E42*t517*t400-0.155399678769094E16*t177*t358
-0.813872612711812E59*t652*t416+0.271733416966487E59*t1345*t366+
0.384240640854784E39*t520*t370;
    t1359 = t433*t89;
    t1384 = 0.184055248593247E55*t252*t366+0.288847611571536E56*t1086*t416
-0.688921669148688E59*t878*t400+0.962825371905129E55*t1086*t400
-0.590890608002908E58*t1359*t416+0.687101614712855E37*t238*t358+
0.92885904897152E58*t581*t358-0.392947717828996E43*t135*t400+
0.201943621232561E17*t155*t366+0.195129907952427E39*t652*t370+
0.306720589295623E57*t639*t366-0.42063065496302E41*t561*t405
-0.174230482490933E56*t1050*t366-0.878329922700135E26*t181*t370
-0.273382714455458E30*t95*t370-0.292931241857535E59*t1053*t366;
    t1390 = t638*t89;
    t1395 = t442*t111;
    t1418 = -0.115918497804513E42*t1330*t358-0.371637934927943E58*t377*t366
-0.679054867440064E58*t1390*t358-0.45895414306485E58*t594*t358
-0.127314977171668E39*t1395*t370+0.607888886643076E57*t584*t358+
0.368246629692209E60*t878*t416-0.442698403732952E57*t95*t366
-0.189659508302699E40*t910*t361+0.72950736962361E38*t130*t416
-0.734530333379934E39*t1308*t361-0.122148199995878E59*t538*t400
-0.172394864267081E30*t226*t370+0.818192102066134E57*t256*t366+
0.137219477749843E40*t1140*t366;
    t1445 = t443*t94;
    t1452 = -0.157143114670727E36*t175*t370-0.172494004487115E31*t189*t370+
0.288497425736159E60*t126*t416+0.415902628710329E50*t128*t416+
0.155425954797969E57*t448*t416+0.370253986977934E57*t232*t366+
0.492745707371776E41*t501*t370+0.844080403681348E56*t792*t358
-0.524132298043287E57*t171*t366-0.440269843357361E40*t1117*t370+
0.239224503803644E58*t594*t366-0.28606571091993E40*t534*t416
-0.48712730337853E57*t820*t416-0.410916617866632E59*t1445*t358
-0.745753003333204E56*t242*t400-0.755963633080353E57*t138*t416;
    t1457 = t383*t89;
    t1486 = 0.362911488217854E42*t620*t400-0.658653493199249E41*t1457*t416
-0.987980239798872E41*t1457*t358+0.729775615093495E16*t199*t358+
0.226725287687826E57*t453*t400-0.139088386166631E59*t1053*t400
-0.650430785395217E49*t222*t366+0.965412231833408E57*t191*t366
-0.159030304080484E41*t584*t370+0.378259102145122E58*t364*t358+
0.160013481188562E42*t703*t416-0.458801002034172E28*t240*t370+
0.45778965423861E43*t149*t400-0.131520795775812E57*t256*t400+
0.246337071466964E44*t696*t370;
    t1519 = -0.199488608067435E57*t836*t358-0.10933459383806E44*t246*t366+
0.343278853103916E41*t683*t416+0.163526779808073E58*t102*t400+
0.820252753149735E58*t234*t416-0.580811039895427E58*t458*t366+
0.133317335708219E59*t209*t358-0.173433164606601E59*t716*t358
-0.447483463417546E58*t95*t358-0.160040192942715E59*t97*t416
-0.37467596734118E59*t119*t416+0.109277622529673E44*t246*t358+
0.13347065291981E57*t187*t416+0.157717032688704E38*t671*t370
-0.678328330310744E56*t224*t416+0.752978307650225E49*t121*t366;
    t1529 = t116*t416;
    t1554 = 0.749939782421177E58*t1002*t416+0.60254953935304E43*t956*t416
-0.103539928954391E43*t1263*t370-0.121722314287707E56*t187*t366+
0.352574560022369E41*t1529*t382+0.408817557598787E49*t132*t400+
0.822797311404982E57*t226*t416-0.287535562666008E42*t428*t370+
0.343278853103916E41*t683*t400+0.984690039523432E58*t666*t366+
0.371628520676449E42*t561*t447-0.313855041833953E38*t124*t416
-0.140104172837588E58*t696*t366+0.72950736962361E38*t130*t358
-0.296408156822829E43*t706*t370+0.169214143069852E58*t97*t366;
    t1569 = t105*t416;
    t1588 = 0.352434354396833E54*t1177*t400-0.891302597213288E50*t228*t358+
0.749275694788607E56*t242*t366+0.288847611571537E56*t1086*t358+
0.15337975247836E59*t1395*t358+0.309665820455059E41*t561*t391
-0.159706114225336E38*t205*t358+0.671644946375026E40*t1569*t382
-0.18306476911411E58*t743*t400-0.472858038179319E41*t517*t366
-0.22261325537708E58*t1390*t416+0.5180865159934E56*t448*t366
-0.291397585240088E42*t602*t358+0.204401995459738E59*t193*t358
-0.141455240133989E59*t1031*t416+0.20262962888101E57*t584*t400;
    t1624 = 0.858197132759794E40*t683*t366-0.38063762426045E59*t733*t400
-258999464615157.0*t177*t366-0.367599599338031E60*t671*t416+
0.541843853058278E28*t219*t370-0.619644043648913E58*t568*t366
-0.708872860163194E36*t201*t416+0.645236248952332E58*t961*t400
-0.589779626774411E37*t167*t416+0.105062529736935E56*t1005*t400
-0.582175556326051E58*t961*t366+0.336989976254956E59*t733*t366
-0.340260557537657E26*t117*t370-0.64580689326767E25*t561*t4
-0.267322823438198E58*t1268*t416;
    t1656 = -0.163262124383637E56*t219*t400+0.148280716066435E43*t830*t370
-0.164663373299812E41*t1457*t366-0.576449749237333E58*t696*t358
-0.167838276423527E59*t1065*t416-0.213400309312559E43*t248*t400
-0.101013333074908E40*t561*t387-0.616391329461637E55*t215*t366+
0.477630928541337E57*t639*t400+0.19828751927276E59*t501*t366
-0.100866791361979E17*t1124-0.114773734591781E59*t173*t416+0.225335883940122E58
*t1268*t366+0.596065070070512E32*t161*t370+0.227591409963239E41*t661*t382+
0.105443227360031E57*t439*t358;
    t1688 = 0.903824309029563E43*t956*t358+0.267410792450604E58*t1014*t400+
0.109289178174819E59*t1065*t366-0.28606571091993E40*t534*t400
-0.658653493199249E41*t1457*t400-0.171051293138232E60*t250*t416
-0.118742169328127E57*t434*t366-0.138672708396655E59*t236*t416
-0.501602363902581E42*t738*t416+0.476524698346623E59*t748*t416+
0.12419001868674E59*t1260*t416-0.125924571457733E60*t126*t358+
0.674445662840504E58*t388*t416+0.73103337811455E59*t195*t416
-0.244780146948558E20*t124*t370;
    t1721 = 0.579456520925836E32*t232*t370+0.146766136360328E45*t157*t416
-0.650406192271234E49*t222*t400-0.215820017109399E40*t1107*t370
-0.162375767792857E57*t820*t400-0.225854303414122E50*t121*t416+
0.415237013334388E58*t848*t358-0.321897070739432E58*t1068*t358+
0.901905813550953E58*t520*t400+0.471983091959198E58*t968*t358+
0.82331686649906E40*t1140*t358-0.209109668796594E44*t203*t400+
0.303402790517073E57*t830*t358-0.343539061308693E59*t1345*t416
-0.102389638300639E58*t434*t400-0.23925940573001E58*t649*t366;
    t1740 = t419*t105;
    t1755 = 0.152107968948049E39*t709*t370+0.213917957655507E43*t248*t416
-0.122374779492636E24*t121*t370-0.985889028817965E58*t1002*t400
-0.782420603647732E57*t501*t400-0.87513387833968E57*t827*t416+
0.415893563909941E50*t128*t358-0.876234353183507E56*t453*t416
-0.41733966591434E57*t1740*t400+0.153614818244873E33*t191*t370
-0.413548409018292E58*t171*t358-0.189659508302699E40*t661*t361
-0.746959448481037E58*t126*t400-0.467333348460534E42*t538*t370
-0.491666346240994E32*t171*t370;
    t1788 = 0.363013578260406E40*t631*t361-0.72602715652081E40*t1038*t382+
0.524291806618955E57*t161*t366+0.243169123207868E38*t130*t400+
0.15253671452993E59*t1107*t416+0.807774484930243E17*t155*t416+
0.467696531693373E58*t1198*t400+0.551275882349893E30*t169*t370+
0.362911488217854E42*t620*t416-0.890258525506349E58*t191*t416+
0.110654372302639E32*t561*t5+0.150658975279029E58*t173*t366+
0.635329481465243E59*t853*t400+0.148660889170419E58*t706*t358
-0.715164277299828E39*t534*t370+0.834893713538958E59*t1117*t416;
    t1822 = -0.302484623622515E42*t406*t370+0.881436400055921E40*t1308*t382
-0.393590988066975E34*t163*t370-0.892448033258599E58*t1260*t366
-0.196593208924805E37*t167*t400-0.183182721230809E58*t106*t366
-0.184601019118165E58*t743*t416+0.158025030487439E57*t254*t400
-0.26435482452039E59*t709*t416+0.857288918650641E41*t848*t370
-0.114099043999768E59*t748*t366+0.447485430430063E58*t113*t358+
0.655257922396219E58*t787*t366-0.297035944209433E50*t213*t366
-0.109363079492251E44*t246*t416+0.71677298282806E57*t1065*t400;
    t1855 = -0.559704121979188E39*t1569*t361-0.292197523761556E39*t1206*t366+
0.171170682452777E56*t525*t358-0.339302920135767E42*t364*t370
-0.227206987201318E57*t232*t400+0.607888886643091E57*t584*t416+
0.325012749347483E34*t173*t370+0.556776997361695E28*t258*t370
-0.159706114225336E38*t205*t416-0.112764664089917E42*t561*t360
-0.845771519518723E58*t751*t400-0.113419049568775E22*t661*t2+
0.199174324000495E59*t489*t400-0.372982800445815E56*t181*t358+
0.222179835451107E56*t240*t400-0.375355432339805E58*t142*t358;
    t1889 = 0.593614779723434E43*t153*t400+0.324227945278536E41*t1345*t370+
0.112273851669869E58*t423*t400+0.17293172238792E58*t1031*t400+
0.129359684173026E58*t594*t416+0.136554845977943E42*t1124*t382
-0.302254481853269E58*t568*t400-0.325601166670929E42*t635*t370+
0.64896004926512E54*t392*t366+0.2546270231927E59*t1445*t366+
0.102279634041258E59*t102*t366+0.204027403124401E59*t1260*t358
-0.749273246245596E56*t226*t366+0.761108444320887E42*t1002*t370+
0.31393874498807E18*t205*t370;
    t1921 = -0.631988141764236E59*t608*t366-0.212136122393778E59*t193*t416+
0.140437883214549E59*t97*t358-0.242627340254381E57*t406*t416+
0.154877928304233E44*t1268*t370+0.799390538631333E34*t250*t370
-0.382188846961351E34*t234*t370-0.759969378790903E42*t553*t370
-0.208856048560765E44*t203*t358-0.131940134140556E57*t674*t416
-0.260430630129832E16*t1529-0.321305175437331E44*t244*t416-0.195462403155893E44
*t887*t370+0.246264086441537E59*t428*t358-0.664219207869572E56*t577*t358
-0.211470323161505E58*t968*t366;
    t1953 = -0.924692715163313E42*t458*t370+0.281360134560525E56*t792*t366+
0.201943621232561E17*t155*t370-0.126584080165787E42*t561*t437+
0.28256563529937E23*t561*t3-0.134942346058522E55*t217*t366+0.393424307426389E43
*t135*t366-0.380780480787768E58*t1019*t400-0.752904855709666E49*t260*t400
-0.170658887061555E34*t100*t370+0.24901410631031E32*t97*t370
-0.456912960209571E56*t553*t366+0.114188607732424E58*t423*t416+
0.346841696915546E58*t364*t400+0.296276213872578E57*t453*t358;
    t1964 = t487*t105;
    t1987 = -0.100031155651345E55*t185*t400-0.185419643812726E41*t1260*t370+
0.219869760748014E58*t236*t366-0.510893945806759E57*t388*t400+
0.398536485604649E57*t236*t400-0.125838305844456E59*t1964*t358+
0.121020118547345E42*t792*t370+0.638661929263114E58*t458*t400
-0.392471128231606E43*t135*t358+0.41271523659745E56*t183*t366+
0.350637028513867E40*t989*t366+0.534761113188939E58*t1964*t366+
0.135754878910004E44*t1390*t370-0.164663373299812E41*t1457*t370
-0.183791640082982E34*t80*t370-0.161269264084078E59*t428*t366;
    t2018 = 536282906662603.0*t1038-0.290410862608327E41*t801*t382+
0.321306619667616E44*t244*t400+0.768409771255016E58*t173*t358+
0.339167955175048E55*t181*t400-0.486773544644824E59*t520*t416+
0.318430305333073E58*t1301*t400-0.293812133351974E40*t1275*t361
-0.715779023399505E33*t561*t82-0.260430630129832E16*t1275-0.14882619394508E42*
t642*t370+0.60254953935304E43*t956*t400+0.487419085559101E36*t209*t370
-0.170634868574784E57*t706*t366-0.456912960209596E56*t553*t400;
    t2032 = t116*t358;
    t2051 = -496113266359511.0*t1077+0.126198244637817E58*t639*t358+
0.187698950969129E60*t878*t358-0.483477664053694E58*t161*t416+
0.634697140433747E59*t1053*t416+0.211272555209925E59*t197*t416
-0.320294912196635E37*t207*t416-0.440718200027962E40*t2032*t361+
0.114736965212944E59*t163*t416-0.196062834477693E58*t923*t358+
0.269909299529922E59*t1395*t416-0.270541444950892E55*t484*t366+
0.451468410245343E57*t183*t358+0.110043202994038E57*t1047*t366+
0.140254811405546E41*t989*t400+0.343737990587594E59*t635*t358;
    t2085 = -0.116879009504622E40*t1206*t416-0.539429907275501E58*t1395*t400
-0.109273235633976E59*t1359*t366-0.12792749178607E42*t649*t370
-0.246772416175543E57*t189*t366-0.38497153885477E36*t1529*r
-0.616134146946717E56*t138*t400+0.779427855620309E57*t1390*t366
-0.20763980159843E40*t1053*t370+0.627207947829543E58*t209*t366
-0.146766796057449E45*t157*t400+0.817097524583663E59*t671*t366
-0.481644749852981E57*t528*t416-0.133455293521769E59*t1002*t358+
0.265040138125899E58*t1263*t358+0.351477424533475E56*t439*t400;
    t2118 = -0.128323846284923E36*t211*t366-0.11004897206032E59*t1019*t366+
0.107685109305154E59*t926*t366-0.105515450505205E37*t561*t375+
0.45723442061056E43*t149*t358+0.160049094535866E59*t80*t416
-0.313855041833953E38*t124*t358-0.112415697513387E58*t119*t400+
0.136235388430583E23*t203*t370-0.962908144635886E58*t1014*t416+
0.911313483234784E41*t589*t400-0.118752822974261E59*t1964*t416
-0.806177439099246E59*t1445*t416-0.592901623854378E43*t617*t370
-0.214954955822726E58*t611*t400+0.911226288656336E57*t617*t416;
    t2152 = -0.72602715652081E40*t1311*t382+0.159457410467641E59*t1359*t400+
0.321307341782763E44*t244*t358+0.119186325901446E42*t787*t370+
0.552667497527272E58*t635*t416-0.147429417190605E19*t130*t370
-0.288691123315963E58*t410*t358+0.267911577671735E42*t827*t370+
0.133740011290934E59*t480*t358-0.106476937322346E58*t1740*t358+
0.911313483234784E41*t589*t416-0.67244527574653E16*t1241-0.637013599139315E43*
t608*t370+0.231857390287089E59*t489*t366+0.256318091197995E58*t189*t416;
    t2183 = 0.542391805286406E57*t1198*t366-0.561592276310161E40*t663*t370
-496113266359511.0*t1569-0.320504399644355E42*t577*t370-0.230090041394785E57*
t1740*t366-0.472858038179319E41*t517*t370+0.307470710907314E58*t232*t358+
0.14850183331086E56*t217*t416+0.400033702971401E41*t703*t366
-0.20516252425502E58*t377*t400+0.321769743997563E16*t631+0.474700912538656E42*
t1068*t370-0.458900121494707E43*t149*t416+0.910365639852958E41*t659*t382+
0.111965867274388E42*t453*t370+0.120660442743463E56*t187*t400;
    t2215 = -0.193197496340856E41*t1330*t366+0.15063738483826E43*t956*t366+
0.195126849058877E50*t222*t358+0.156922155544185E60*t642*t416+
0.548877910999374E40*t1140*t416-0.458344887866665E43*t149*t366
-0.811624334852488E55*t484*t358-0.678551643339766E56*t215*t358+
0.229033871570951E37*t238*t366-0.125596497835691E30*t561*t92
-0.105486029786671E29*t142*t370-0.708872860163194E36*t1124*r+
0.158270717683538E42*t484*t370+0.28155591887974E56*t90*t366+
0.202557853405951E56*t252*t358;
    t2248 = 0.609154028724932E41*t489*t370+0.148557038231274E24*t260*t370
-0.158263946209984E59*t642*t400+0.246104083047944E57*t234*t400
-0.370069649003175E41*t1147*t416+0.135737949094957E51*t145*t400
-0.24576805574873E57*t258*t416+0.541195320315116E37*t1301*t370
-0.179335671890435E59*t1117*t400+0.199580233431038E42*t492*t370
-0.273394044970435E42*t384*t366+0.142157181178157E58*t209*t400+
0.133032503636938E58*t169*t358+0.795416229403411E58*t635*t400+
0.227828370808696E41*t589*t370-0.253564318476145E16*t151*t416;
    t2281 = -0.13707388806286E57*t553*t358+0.227828370808696E41*t589*t366+
0.99955910667731E54*t185*t366+0.617135764775665E55*t215*t400
-0.218667212450653E59*t666*t416-0.435616293912487E41*t631*t382+
0.633430743911855E59*t85*t416+0.828621880139566E57*t706*t400+
0.141342416333068E44*t733*t370+0.514918279655875E41*t683*t358+
0.545552452399286E57*t420*t358-0.460614853388067E25*t228*t370
-0.450638563879818E39*t878*t370+0.167911236593756E40*t561*t382
-0.116879009504622E40*t1206*t400;
    t2314 = 0.1687798436582E59*t520*t366-0.350384657344789E58*t232*t416
-0.236745930786577E42*t923*t370+0.821740259913907E57*t242*t358
-0.277534299650751E59*t85*t358-0.522882370981901E58*t250*t400
-0.979649586039273E57*t230*t358-0.724763107781587E58*t1112*t358+
0.167911236593756E40*t900*t382-0.62330812348686E58*t256*t416
-0.664219207869541E56*t577*t416+0.400033702971401E41*t1038*t515
-0.131940134140557E57*t674*t358-0.178881634412719E59*t751*t366+
0.10573030631906E55*t1177*t416+0.96282537190511E55*t1086*t366;
    t2347 = -0.318026532189513E42*t420*t370+0.109306108183867E44*t246*t400+
0.113456258941916E57*t159*t400+0.184193833579559E55*t117*t400
-0.212900205365897E59*t926*t358+0.209641585301327E59*t1359*t358+
0.122127060798473E60*t250*t358-0.641493729130501E59*t195*t358
-0.512140156187915E57*t377*t358+0.528861840033554E41*t2032*t382
-0.141257207765667E58*t1068*t400+0.114471100832793E58*t100*t400
-124028316589878.0*t900-0.140446814223919E59*t80*t358+0.827153471961844E58*t716
*t416-0.22140640262316E56*t577*t400;
    t2377 = -0.664962026891669E56*t836*t400-0.291141192387267E57*t161*t400+
0.75278206851883E49*t121*t400-0.180162093085962E44*t1359*t370-651076575324578.0
*t693-0.475263837538721E57*t611*t416+0.202216270560609E58*t193*t366+
536282906662603.0*t1311-0.122655956559392E50*t132*t416+0.261626671333375E58*
t1964*t400-0.77278998536342E41*t1330*t400-0.390645945194749E16*t2032
-0.337088936140764E58*t787*t400+0.150337353442276E18*t561*r-0.49838113387507E58
*t696*t416-0.2481382703438E56*t866*t366;
    t2410 = 0.330129608982114E57*t1047*t358-0.130451870542093E42*t480*t370
-0.429098566379896E40*t534*t358+0.804760939308363E59*t751*t416
-0.370069649003175E41*t1147*t400-0.877519748703889E57*t1740*t416+
0.346476552857926E58*t1345*t400-0.293812133351974E40*t1529*t361+
0.603147595632218E58*t1301*t366-0.77278998536342E41*t1330*t416+
0.214513162665044E16*t801-0.891291363538679E50*t228*t416+0.193807818750995E40*
t666*t370+0.267570353954657E59*t119*t358+0.293342328249465E59*t733*t416;
    t2442 = 0.596624834218592E58*t1112*t366+0.33626697620924E42*t1112*t370+
0.209616909268245E44*t203*t416-0.342254987468301E57*t142*t366
-0.133032152025704E58*t159*t358-651076575324578.0*t1308+0.139242976555031E43*
t716*t370-0.532353714084451E37*t205*t400-0.17488812829304E21*t244*t370
-0.106764970732211E37*t207*t400-0.836445369302954E20*t561*t2
-0.33828155938753E37*t751*t370-0.725915968304717E43*t961*t370
-0.236290953387731E36*t201*t366-0.768042529376457E58*t163*t358+
0.989632243915371E58*t1198*t358;
    t2474 = 0.105268273264076E28*t561*t140+0.150820961331943E59*t1445*t400+
0.497523603347682E59*t538*t358-0.164036426982262E43*t384*t358+
0.807774484930243E17*t155*t400-0.555104473504763E41*t1147*t358
-0.668753835187615E30*t159*t370-0.696758905740781E59*t489*t416
-0.493312609551463E57*t1263*t366+0.370734668808696E56*t981*t358
-0.864016295096288E58*t1395*t366-0.162890163214325E58*t1301*t358
-0.338912827796943E55*t181*t366-0.253564318476145E16*t151*t400+
0.408924130278655E49*t132*t366;
    t2507 = -0.109357617988174E43*t384*t400+0.245181468220487E57*t258*t358+
0.143682287901584E29*t183*t370-0.28991766763053E60*t853*t416+
0.135680409854657E51*t145*t366+0.821274708210138E21*t157*t370+
0.178175626269119E59*t377*t416+0.375838161759362E58*t142*t416+
0.262573573193855E58*t254*t416+0.503961654304124E58*t406*t400
-0.744414811031306E56*t866*t358+0.215368808819975E59*t250*t366
-0.758638033210798E40*t1241*t361+0.21038221710832E41*t989*t358
-0.224588041604625E58*t254*t358+0.105245020160222E58*t951*t366;
    t2539 = -633910796190366.0*t151*t366+0.60758707049581E58*t236*t358+
0.370734668808797E56*t981*t416+0.605022630434008E39*t1038*t361
-0.580624822989402E59*t1345*t358-0.100432354516343E59*t85*t366+
0.386259053850413E57*t95*t400-0.485662642066812E41*t1308*t515
-0.264533587461617E42*t866*t370-0.380346477714219E16*t151*t358
-0.184193802022196E55*t252*t400+0.195124389746478E50*t222*t416
-124028316589878.0*t561-0.962465387584552E56*t492*t358-0.320821795861475E56*
t492*t400;
    t2571 = -0.197758076782384E59*t165*t416+0.315187589210758E56*t1005*t416+
0.664435175222541E42*t448*t370+0.242009052173606E40*t472*t361
-0.236290953387731E36*t201*t400+0.329135334238568E58*t748*t358+
0.213659133484035E43*t248*t366+0.616391153222327E55*t224*t366
-0.168111318936632E16*t910-0.230017094947168E44*t1198*t370+0.147036502956506E59
*t961*t358+0.907278720544632E41*t620*t366+0.419729388720437E42*t661*t391
-0.103873073037893E58*t97*t400+0.203771295680766E19*t661*r-0.125400590975645E42
*t661*t515;
    t2605 = 0.196905317502169E41*t1014*t370+0.393900897023793E43*t135*t416
-0.269959724770053E59*t1065*t358+0.916602112906506E58*t709*t366+
0.35243435439674E54*t1177*t366+0.722467039167319E57*t138*t358+
0.452702417271359E57*t197*t400-0.139200446961659E58*t169*t416
-0.436038875878512E58*t1107*t400+0.789183727666156E18*t1308*r+
0.157185699540532E58*t1263*t400-0.175318514256933E40*t1206*t358
-0.121065329869654E59*t1268*t358-0.74441481103129E56*t866*t416+
0.97083949640071E38*t1445*t370+0.315187589210766E56*t1005*t358;
    t2637 = 0.245851627300429E57*t163*t400-0.103599785846063E16*t177*t400+
0.139200095743677E58*t159*t416-0.36333111232629E59*t845*t400
-0.180129450189575E57*t219*t416-0.303199096964296E60*t853*t358+
0.382502689248747E59*t1117*t358-0.378498826500953E58*t1390*t400
-0.16237576779286E57*t820*t366+0.46441526439713E58*t95*t416+
0.100746741956254E41*t359*t382-0.439800447135278E56*t674*t366+
0.505462496505436E42*t410*t370+0.184056126980356E36*t236*t370
-0.102771315419091E58*t234*t366-744169899539267.0*t359;
    t2648 = t354*t354;
    t2649 = t2648*t2648;
    t2654 = exp(-10000.0*t355);
    t2655 = t2654+t348;
    t2656 = t2655*t2655;
    t2657 = t2656*t2656;
    if (r <= 0.1E-1)
      return -0.1E-10*(t134+t179+t221+t262)/t266/t269*t342;
    else if (r < 0.99)
      return -0.1E-4*t348*(t945+t426+t1099+t2248+t1022+t2183+t514+t1755+t2571+t2442
+t1239+t2539+t984+t1205+t1418+t2507+t873+t2281+t1452+t764+t2118+t2605+t558+t599
+t1721+t2377+t1987+t1788+t1062+t1554+t1855+t1889+t2347+t1921+t1314+t474+t909+
t1384+t2410+t1170+t1135+t1486+t1278+t1350+t1688+t2314+t686+t2152+t1822+t2051+
t2085+t2215+t2637+t2474+t835+t2018+t1656+t1588+t1953+t725+t645+t1624+t799+t1519
)*t342/t268/t269/t2648/t2649/t2655/t2657;
    else
      return 0.0;
  }
#endif
  }

  inline
  void
  CornerSingularityBiharmonicRHS::vector_value(const Point<2> &p,
				     Vector<double>& values) const
  {
    values[0] = value(p);
  }


 double
  CornerSingularityBiharmonicRHS::zeta(const double r) const {
    if (r <= r0)
      return 1.0;
    else {
      if (r >= r1)
	return 0.0;
      else {
	const double help1(r1-r);
	const double help0(r-r0);
	return exp(-1.0/(help1*help1))/(exp(-1.0/(help0*help0))+exp(-1.0/(help1*help1)));
      }
    }
  }


  double
  CornerSingularityBiharmonicRHS::zeta_prime(const double r) const {
    if (r <= r0 || r >= r1)
      return 0.0;
    else {
      const double help1 = r1-r;
      const double help0 = r-r0;
      return
	-2.0
	* exp(-(2*r*r-2*r*r0+r0*r0+r1*r1-2*r1*r)/(help1*help1*help0*help0))
	* (3*r*r*r0-3*r*r0*r0+r0*r0*r0-r1*r1*r1+3*r1*r1*r-3*r1*r*r)
	/ (exp(-1/(help0*help0))+exp(-1/(help1*help1)))
	/ (exp(-1/(help0*help0))+exp(-1/(help1*help1)))
	/ (-help0*help0*help0*help1*help1*help1);
    }
  }

  double
  CornerSingularityBiharmonicRHS::zeta_primeprime(const double r) const {
    if (r <= r0 || r >= r1)
      return 0.0;
    else {
      const double help0   = r-r0;
      const double help0_2 = help0*help0;
      const double help0_3 = help0_2*help0;
      const double help0_4 = help0_2*help0_2;
      const double help0_6 = help0_3*help0_3;
      const double help1   = r1-r;
      const double help1_2 = help1*help1;
      const double help1_3 = help1_2*help1;
      const double help1_4 = help1_2*help1_2;
      const double help1_6 = help1_3*help1_3;

      const double denom = exp(-1/help0_2)+exp(-1/help1_2);
      const double numer = 2*exp(-1/help0_2)/help0_3-2*exp(-1/help1_2)/help1_3;
      
      return
	-6 * exp(-1/help1_2)/(help1_4*denom)
	+ 4 * exp(-1/help1_2)/(help1_6*denom)
	+ 4 * exp(-1/help1_2)*numer/(help1_3*denom*denom)
	+ 2 * exp(-1/help1_2)*numer*numer/(denom*denom*denom)
	-exp(-1/help1_2)*(-6*exp(-1/help0_2)/help0_4+4*exp(-1/help0_2)/help0_6-6*exp(-1/help1_2)/help1_4+4*exp(-1/help1_2)/help1_6)/(denom*denom);
    }
  }

   double
  CornerSingularityBiharmonicRHS::zeta_third_der(const double r) const {
    if (r <= r0 || r >= r1)
      return 0.0;
    else {
      const double help0 = r-r0;
      const double help0_2 = help0*help0;
      const double help0_3 = help0_2*help0;
      const double help0_4 = help0_2*help0_2;
      const double help0_5 = help0_4*help0;
      const double help0_6 = help0_3*help0_3;
      const double help0_7 = help0_6*help0;
      //  const double help0_8 = help0_7* help0;
      const double help0_9 = help0_7*help0_2;
      const double help1   = r1-r;
      const double help1_2 = help1*help1;
      const double help1_3 = help1_2*help1;
      const double help1_4 = help1_2*help1_2;
      const double help1_5 = help1_4*help1;
      const double help1_6 = help1_3*help1_3;
      const double help1_7 = help1_6*help1;
      //    const double help1_8 = help1_7*help1;
      const double help1_9 = help1_7*help1_2;
      const double h0 = -1/help0_2;
      const double h1 = -1/help1_2;
      

      return -24*exp(h1)/(help1_5*(exp(h0)+exp(h1)))
	+36*exp(h1)/(help1_7*(exp(h0)+exp(h1)))
	+18*exp(h1)*(2*(exp(h0)/help0_3-exp(h1)/help1_3))/(help1_4*pow(exp(h0)+exp(h1),2))
	-8*exp(h1)/(help1_9*(exp(h0)+exp(h1)))
	-12*exp(h1)*(2*(exp(h0)/help0_3-exp(h1)/help1_3))/(help1_6*pow(exp(h0)+exp(h1),2))
	-12*exp(h1)*pow(2*(exp(h0)/help0_3-exp(h1)/help1_3),2)/(help1_3*pow(exp(h0)+exp(h1),3))
	+6*exp(h1)*(-6*exp(h0)/help0_4+4*exp(h0)/help0_6-6*exp(h1)/help1_4+4*exp(h1)/help1_6)
	/(help1_3*pow(exp(h0)+exp(h1),2))
	-6*exp(h1)*pow(2*(exp(h0)/help0_3-exp(h1)/help1_3),3)/pow(exp(h0)+exp(h1),4)
	+6*exp(h1)*(2*(exp(h0)/help0_3-exp(h1)/help1_3))
	*(-6*exp(h0)/help0_4+4*exp(h0)/help0_6-6*exp(h1)/help1_4+4*exp(h1)/help1_6)
	/pow(exp(h0)+exp(h1),3)
	-exp(h1)
	*(24*exp(h0)/help0_5-36*exp(h0)/help0_7+8*exp(h0)/help0_9
	  -24*exp(h1)/help1_5+36*exp(h1)/help1_7-8*exp(h1)/help1_9)
	/pow(exp(h0)+exp(h1),2);
    }
  }

   double
  CornerSingularityBiharmonicRHS::zeta_fourth_der(const double r) const {
    if (r <= r0 || r >= r1)
      return 0.0;
    else {
      const double help0 = r-r0;
      const double help0_2 = help0*help0;
      const double help0_3 = help0_2*help0;
      const double help0_4 = help0_2*help0_2;
      const double help0_5 = help0_4*help0;
      const double help0_6 = help0_3*help0_3;
      const double help0_7 = help0_6*help0;
      const double help0_8 = help0_7* help0;
      const double help0_9 = help0_8*help0;
      const double help0_10 = help0_9* help0;     
      const double help0_12 = help0_10* help0_2;
      const double help1   = r1-r;
      const double help1_2 = help1*help1;
      const double help1_3 = help1_2*help1;
      const double help1_4 = help1_2*help1_2;
      const double help1_5 = help1_4*help1;
      const double help1_6 = help1_3*help1_3;
      const double help1_7 = help1_6*help1;
      const double help1_8 = help1_7*help1;
      const double help1_9 = help1_8*help1;
      const double help1_10 = help1_9*help1;
      const double help1_12 = help1_10*help1_2;
      const double h0 = -1/help0_2;
      const double h1 = -1/help1_2;


     return 24*exp(h1)*pow(2*(exp(h0)/help0_3-exp(h1)/help1_3),4)/pow(exp(h0)+exp(h1),5)
       -36*exp(h1)*pow(2*(exp(h0)/help0_3-exp(h1)/help1_3),2)
       *(-6*exp(h0)/help0_4+4*exp(h0)/help0_6-6*exp(h1)/help1_4+4*exp(h1)/help1_6)/pow(exp(h0)+exp(h1),4)
       +6*exp(h1)*pow(-6*exp(h0)/help0_4+4*exp(h0)/help0_6-6*exp(h1)/help1_4+4*exp(h1)/help1_6,2)/pow(exp(h0)+exp(h1),3)
       +16*exp(h1)*(exp(h0)/help0_3-exp(h1)/help1_3)
       *4*(6*exp(h0)/help0_5-9*exp(h0)/help0_7+2*exp(h0)/help0_9-6*exp(h1)/help1_5+9*exp(h1)/help1_7-2*exp(h1)/help1_9)
       /pow(exp(h0)+exp(h1),3)
       -72*exp(h1)*pow(2*(exp(h0)/help0_3-exp(h1)/help1_3),2)
       /(help1_4*pow(exp(h0)+exp(h1),3))
       +48*exp(h1)*pow(2*(exp(h0)/help0_3-exp(h1)/help1_3),2)
       /(help1_6*pow(exp(h0)+exp(h1),3))
       +48*exp(h1)*pow(2*(exp(h0)/help0_3-exp(h1)/help1_3),3)
       /(help1_3*pow(exp(h0)+exp(h1),4))
       -48*exp(h1)*2*(exp(h0)/help0_3-exp(h1)/help1_3)
       *(-6*exp(h0)/help0_4+4*exp(h0)/help0_6-6*exp(h1)/help1_4+4*exp(h1)/help1_6)
       /(help1_3*pow(exp(h0)+exp(h1),3))
       -exp(h1)
       *(-120*exp(h0)/help0_6+300*exp(h0)/help0_8-144*exp(h0)/help0_10+16*exp(h0)/help0_12
	 -120*exp(h1)/help1_6+300*exp(h1)/help1_8-144*exp(h1)/help1_10+16*exp(h1)/help1_12)
       /pow(exp(h0)+exp(h1),2)
       -120*exp(h1)/(help1_6*(exp(h0)+exp(h1)))
       +300*exp(h1)/(help1_8*(exp(h0)+exp(h1)))
       -144*exp(h1)/(help1_10*(exp(h0)+exp(h1)))
       +16*exp(h1)/(help1_12*(exp(h0)+exp(h1)))
       +96*exp(h1)*(2*(exp(h0)/help0_3-exp(h1)/help1_3))/(help1_5*pow(exp(h0)+exp(h1),2))
       -144*exp(h1)*(2*(exp(h0)/help0_3-exp(h1)/help1_3))/(help1_7*pow(exp(h0)+exp(h1),2))
       +36*exp(h1)*(-6*exp(h0)/help0_4+4*exp(h0)/help0_6-6*exp(h1)/help1_4+4*exp(h1)/help1_6)
       /(help1_4*pow(exp(h0)+exp(h1),2))
       +32*exp(h1)*(2*(exp(h0)/help0_3-exp(h1)/help1_3))
       /(help1_9*pow(exp(h0)+exp(h1),2))
       -24*exp(h1)*(-6*exp(h0)/help0_4+4*exp(h0)/help0_6-6*exp(h1)/help1_4+4*exp(h1)/help1_6)
       /(help1_6*pow(exp(h0)+exp(h1),2))
       +8*exp(h1)
       *(24*exp(h0)/help0_5-36*exp(h0)/help0_7+8*exp(h0)/help0_9
	 -24*exp(h1)/help1_5+36*exp(h1)/help1_7-8*exp(h1)/help1_9)
       /(help1_3*pow(exp(h0)+exp(h1),2));
    }
  }
}
